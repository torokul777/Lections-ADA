'===============================Типы данныз в python======================='
# immutable - неизменяемые типы данных(int,float,str,None,Bool,tuple frozenset)
# mutable - изменяемые (dict,list,set) 

'=================================Numbers============================='
# числа - неизменяемый тип данных для хранения числовых значений  и проведени над арифметическими числами
int
float # везественные числа , дробные ,десятичные, c плавающей точкой
# decimal # десятичные более точные
complex # копмплескные числа 6+5j + 3e
# long # огромные числа


# строки - неизменяемый тип данных, который представляет собой убпорядочную посследовательность
# символов заключенных в одинарные или двойные кавычки

'===============================Индексы==========================='
# string = 'hello world'

# string[0]
# string[-1]
# string[::-1]
# string[0:5]

'==============================List========================'
# список - изменяемый тип данных, итерируемый, упорядочный тип данных который хранит в
#  себе посследовательность элементов
# list1 = [1,2,3,4,5,6,7,8,True,False,None]
'======================================Tuple==========================='
# кортеж - неизменяемый список хранит в себе посследоватаельность элементов
# tuple = 1,2,3,4,5,6 #(1,2,3,4,5,6)
# tuple1 = (1) #int
# tuple2 =(1,) #tuple

'=================================Set============================='
# множество - изменяемый,неупорядочный тип данных хранит в себе только уникальные значение
# set1 = {1,2,3,4,4,4,4,4}#{1,2,3,4}
# # для set 1 == True,  0 == False
# set2 = {1,0,True,False}#{0,1}
# set3 = {} #dict

'========================Frozenset======================'
# неизменяемое множество 
# f_set = frozenset([1,2,2,2,2,5,5,5])#{[1,2,5]}
# все методы которые были у set для изменения во frozenset отсуствуют
# print(dir(frozenset))

'===========================================Dictinory==============================='
# словарь - изменяемый, неупорядоченный, тип данных , для зранения данных в паре {ключ: значение}
# ключи должны быть неизменяемыми типами данных
# если ключом будет тюпл то в нем должны быть неизменяемые типы данных
# если ключ повторяется то значение перезаписывается на последнее

# dict1 = {'a':5,'b':2,'a':3}#{'a':3,'b':5}

'=======================Bool=================='
# bool - логический тип данныз с двумя знаениями True,False
 
'========================None================='
# None - тип данных, для обозначение пустоты

'================================Условные операторы==================='
# условные - конструкция которая позволяет выполнять или невыполнять какоцто кусочек кода 
# который находится в теле условия

'===========================Тернарные операторы=================='
# тернарный оператор - условие которая написано в одну строку и возвращает одну из двух 
# результатов в зависимости от условие
# 'ree' if True else 'Res2'
'====================================Цикл============================'
# цикл - конструкция которая позволяет циклично пройтись по итерируемому обьекту
# (str,list,set,dict,tuple,range). В цикле for мы выполняем итерацию над каждым элементом интируемого обьекта
#итерация - одно прохождение цикла
# итерируемый обьект по которому можно пройтись с циклом for
# break - прерывает работу цикла
# сontinue - пропускает 1 итерацию 

# list1 = [1,2,4,5,6,7,8]
# for el in list1:
#     print(el)

'============================================while====================='
# цикл который повторяет код пока условие True - верное может быть бесконечным

# n = 10
# while n>100:
#     print(n)
#     n +=1

# employees = [
#     {"name": "Alice", "salary": 3000, "overTime": 10},
#     {"name": "Bob", "salary": 2500, "overTime": 5},
#     {"name": "Charlie", "salary": 4000, "overTime": 0}
# ]
# def func(employees:dict)-> dict:
#     result = []
#     BONUS = 200

#     for employee in employees:
#         modified_salary = employee['salary'] + employee['overTime'] * BONUS
#         employee.update({"salary":modified_salary})
#         employee.pop('overTime')
#         result.append(employee)
    
#     return result
# print(func(employees))

# list_ = [1,2,3,4,5,6,7,'hello','bye','name','is','Torokul']

# def func2(ints_and_strs:list):
#     int_list = []
#     str_list = []

#     for i in ints_and_strs:
#         if type(i) == int:
#             int_list.append(i)
#         elif type(i) == str:
#             str_list.append(i)
        
#     return int_list,str_list
# int_list,str_list = func2(list_)
# print(int_list)
# print(str_list)

# products = [
#     {"title": "Apple Juice", "price": 2.5},
#     {"title": "Orange Juice", "price": 3.0},
#     {"title": "Grape Juice", "price": 4.0},
#     {"title": "Apple Juice", "price": 2.5},
#     {"title": "Apple Juice", "price": 2.5},
# ]
# def func3(products : list, title: str):
#     filter_data = [product for product in products if title.lower() in product.get('title').lower()]

#     return filter_data
# print(func3(products,'Apple Juice'))
